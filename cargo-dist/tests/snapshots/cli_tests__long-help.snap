---
source: cargo-dist/tests/cli-tests.rs
expression: format_outputs(&output)
---
stdout:
Shippable packaging for Rust.

When run without a subcommand, `cargo dist` will invoke the `build` subcommand. See `cargo dist help build` for more details.

Usage: cargo dist [OPTIONS]
       cargo dist <COMMAND>

Commands:
  build
          Build distributables for the current platform
  init
          Initialize default settings in your Cargo.toml
  generate-ci
          Generate CI scripts for orchestrating cargo-dist
  manifest
          Generate the final build manifest without running any builds
  help
          Print this message or the help of the given subcommand(s)

Options:
      --no-builds
          Don't actually do any builds, this can be useful for generating only installers

  -h, --help
          Print help information (use `-h` for a summary)

  -V, --version
          Print version information

GLOBAL OPTIONS:
      --verbose <VERBOSE>
          How verbose logging should be (log level)
          
          [default: warn]
          [possible values: off, error, warn, info, debug, trace]

      --output-format <OUTPUT_FORMAT>
          The format of the output
          
          [default: human]
          [possible values: human, json]

      --no-local-paths
          Strip local paths from output (e.g. in the dist manifest json)

      --target <TARGET>
          Target triples we want to build

      --installer <INSTALLER>
          Installers we want to build

          Possible values:
          - github-shell:      Generates a shell script that fetches from github ci
          - github-powershell: Generates a powershell script that fetches from github ci

GLOBAL_OPTIONS:
      --exe-bundle-style <EXE_BUNDLE_STYLE>
          Executable bundle style

          Possible values:
          - uncompressed-file: Just a single uncompressed file
          - zip:               `.zip`
          - tar-gzip:          `.tar.gz`
          - tar-xzip:          `.tar.xz`
          - tar-zstd:          `.tar.zstd`

stderr:

