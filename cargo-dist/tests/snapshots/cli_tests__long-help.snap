---
source: cargo-dist/tests/cli-tests.rs
expression: format_outputs(&output)
---
stdout:
Shippable packaging for Rust.

When run without a subcommand, `cargo dist` will invoke the `build` subcommand. See `cargo dist help build` for more details.

Usage: cargo dist [OPTIONS]
       cargo dist <COMMAND>

Commands:
  build
          Build artifacts
  init
          Initialize default settings in your Cargo.toml
  generate-ci
          Generate CI scripts for orchestrating cargo-dist
  manifest
          Generate the final build manifest without running any builds
  help
          Print this message or the help of the given subcommand(s)

Options:
      --artifacts <ARTIFACTS>
          Which subset of the Artifacts to build
          
          Artifacts can be broken up into two major classes: "local" ones, which are made for each target system (executable-zips, symbols, MSIs...); and "global" ones, which are made once per app (curl-sh installers, npm package, metadata...).
          
          Having this distinction lets us run cargo-dist independently on multiple machines without collisions between the outputs.
          
          If let unspecified, we will pick a fuzzier "host" mode that builds "as much as possible" for the local system. This mode is appropriate for local testing/debugging/demoing. If no --target flags are passed on the CLI then "host" mode will try to intelligently guess which targets to build for, which may include building targets that aren't defined in your metadata.dist config (since that config may exclude the current machine!).
          
          The specifics of "host" mode are intentionally unspecified to enable us to provider better out-of-the-box UX for local usage. In CI environments you should always specify "global" or "local" to get consistent behaviour!
          
          [default: host]

          Possible values:
          - local:  Build target-specific artifacts like executable-zips and MSIs
          - global: Build unique artifacts like curl-sh installers and npm packages
          - host:   Fuzzily build "as much as possible" for the host system
          - all:    Build all the artifacts; useful for `cargo dist manifest`

  -h, --help
          Print help (see a summary with '-h')

  -V, --version
          Print version

GLOBAL OPTIONS:
      --verbose <VERBOSE>
          How verbose logging should be (log level)
          
          [default: warn]
          [possible values: off, error, warn, info, debug, trace]

      --output-format <OUTPUT_FORMAT>
          The format of the output
          
          [default: human]
          [possible values: human, json]

      --no-local-paths
          Strip local paths from output (e.g. in the dist manifest json)
          
          This is useful for generating a clean "full" manifest as follows:
          
          `cargo dist manifest --artifacts=all --output-format=json --no-local-paths`

      --target <TARGET>
          Target triples we want to build
          
          If left unspecified we will use the values in [workspace.metadata.dist], except for `cargo dist init` which will select some "good defaults" for you.

      --installer <INSTALLER>
          Installers we want to build
          
          If left unspecified we will use the values in [workspace.metadata.dist]. `cargo dist init` will persist the values you pass to that location.

          Possible values:
          - shell:      Generates a shell script that fetches/installs the right build
          - powershell: Generates a powershell script that fetches/installs the right build
          - npm:        Generates an npm project that fetches the right build to your node_modules

      --ci <CI>
          CI we want to support
          
          If left unspecified we will use the value in [workspace.metadata.dist]. `cargo dist init` will persist the values you pass to that location.

          Possible values:
          - github: Generate github CI that uploads to github releases

      --tag <TAG>
          The (git) tag to use for the Announcement that each invocation of cargo-dist is performing.
          
          This tag serves two purposes: defining which apps we are Announcing new Releases for (and therefore building binaries and installers for); and picking an id to use for certain URLs. For instance the git tag associated with a Github Release is part of the URL to fetch artifacts from that release, which needs to be known by some installers!
          
          The currently accepted formats are "v{VERSION}" and "{PACKAGE_NAME}-v{VERSION}" ("v1.0.0", "v0.1.0-prerelease1", "my-app-v1.0.0", etc).
          
          If you use the prefixed version then we will only Announce/Release that package's apps (and return an error if that is not in fact the package's current version). This is approp
          
          If you use the unprefixed version then we will assume you're Announcing/Releasing all packages in the workspace that have that version. This is appropriate for workspaces that only have one app, or for monorepos that version all their apps in lockstep.
          
          If you do not specify this tag we will attempt to infer it by trying to Announce/Release every app in the workspace, succeeding only if they all have the same version. The tag selected will be "v{VERSION}".
          
          In the future we may try to make this look at the current git tags or something?

stderr:

