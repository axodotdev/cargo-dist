---
source: cargo-dist/tests/cli-tests.rs
expression: format_outputs(&output)
---
stdout:
# cargo dist CLI manual

> This manual can be regenerated with `cargo dist help-markdown`

Shippable packaging for Rust.

See 'init', 'build' and 'plan' for the 3 most important subcommands.

### Usage

```text
cargo dist [OPTIONS]
```
cargo dist <COMMAND>

### Commands
* [build](#cargo-dist-build): Build artifacts
* [init](#cargo-dist-init): Setup or update cargo-dist
* [generate-ci](#cargo-dist-generate-ci): Generate CI scripts for orchestrating cargo-dist
* [manifest](#cargo-dist-manifest): Generate the final build manifest without running any builds
* [plan](#cargo-dist-plan): Get a plan of what to build (and check project status)
* [help](#cargo-dist-help): Print this message or the help of the given subcommand(s)

### Options
### GLOBAL OPTIONS
#### `-v, --verbose <VERBOSE>`
How verbose logging should be (log level)

\[default: warn]  
\[possible values: off, error, warn, info, debug, trace]  

#### `-o, --output-format <OUTPUT_FORMAT>`
The format of the output

\[default: human]  
\[possible values: human, json]  

#### `--no-local-paths`
Strip local paths from output (e.g. in the dist manifest json)

This is useful for generating a clean "full" manifest as follows:

`cargo dist manifest --artifacts=all --output-format=json --no-local-paths`

#### `-t, --target <TARGET>`
Target triples we want to build

If left unspecified we will use the values in [workspace.metadata.dist], except for `cargo dist init` which will select some "good defaults" for you.

#### `-i, --installer <INSTALLER>`
Installers we want to build

If left unspecified we will use the values in [workspace.metadata.dist]. `cargo dist init` will persist the values you pass to that location.

Possible values:
- shell:      Generates a shell script that fetches/installs the right build
- powershell: Generates a powershell script that fetches/installs the right build
- npm:        Generates an npm project that fetches the right build to your node_modules

#### `-c, --ci <CI>`
CI we want to support

If left unspecified we will use the value in [workspace.metadata.dist]. `cargo dist init` will persist the values you pass to that location.

Possible values:
- github: Generate github CI that uploads to github releases

#### `--tag <TAG>`
The (git) tag to use for the Announcement that each invocation of cargo-dist is performing.

This tag serves two purposes: defining which apps we are Announcing new Releases for (and therefore building binaries and installers for); and picking an id to use for certain URLs. For instance the git tag associated with a Github Release is part of the URL to fetch artifacts from that release, which needs to be known by some installers!

The currently accepted formats are "v{VERSION}" and "{PACKAGE_NAME}-v{VERSION}" ("v1.0.0", "v0.1.0-prerelease1", "my-app-v1.0.0", etc).

If you use the prefixed version then we will only Announce/Release that package's apps (and return an error if that is not in fact the package's current version). This is approp

If you use the unprefixed version then we will assume you're Announcing/Releasing all packages in the workspace that have that version. This is appropriate for workspaces that only have one app, or for monorepos that version all their apps in lockstep.

If you do not specify this tag we will attempt to infer it by trying to Announce/Release every app in the workspace, succeeding only if they all have the same version. The tag selected will be "v{VERSION}".

In the future we may try to make this look at the current git tags or something?

<br><br><br>
## cargo dist build
Build artifacts

### Usage

```text
cargo dist build [OPTIONS]
```

### Options
#### `-a, --artifacts <ARTIFACTS>`
Which subset of the Artifacts to build

Artifacts can be broken up into two major classes: "local" ones, which are made for each target system (executable-zips, symbols, MSIs...); and "global" ones, which are made once per app (curl-sh installers, npm package, metadata...).

Having this distinction lets us run cargo-dist independently on multiple machines without collisions between the outputs.

If let unspecified, we will pick a fuzzier "host" mode that builds "as much as possible" for the local system. This mode is appropriate for local testing/debugging/demoing. If no --target flags are passed on the CLI then "host" mode will try to intelligently guess which targets to build for, which may include building targets that aren't defined in your metadata.dist config (since that config may exclude the current machine!).

The specifics of "host" mode are intentionally unspecified to enable us to provider better out-of-the-box UX for local usage. In CI environments you should always specify "global" or "local" to get consistent behaviour!

\[default: host]  

Possible values:
- local:  Build target-specific artifacts like executable-zips and MSIs
- global: Build unique artifacts like curl-sh installers and npm packages
- host:   Fuzzily build "as much as possible" for the host system
- all:    Build all the artifacts; useful for `cargo dist manifest`

#### `-h, --help`
Print help (see a summary with '-h')

### GLOBAL OPTIONS
This subcommand accepts all the [global options](#global-options)

<br><br><br>
## cargo dist init
Setup or update cargo-dist

This will interactively guide you through the process of selecting configuration options and will also automatically run 'cargo dist generate-ci' afterwards as necessary. It will also handle updating your project to a new version of cargo-dist if you're running one.

### Usage

```text
cargo dist init [OPTIONS]
```

### Options
#### `-y, --yes`
Automatically accept all recommended/default values

This is equivalent to just mashing ENTER over and over during the interactive prompts.

#### `--no-generate-ci`
Don't automatically invoke 'cargo dist generate-ci' at the end

#### `--with-json-config <WITH_JSON_CONFIG>`
A path to a json file containing values to set in workspace.metadata.dist

#### `-h, --help`
Print help (see a summary with '-h')

### GLOBAL OPTIONS
This subcommand accepts all the [global options](#global-options)

<br><br><br>
## cargo dist generate-ci
Generate CI scripts for orchestrating cargo-dist

### Usage

```text
cargo dist generate-ci [OPTIONS]
```

### Options
#### `-h, --help`
Print help (see a summary with '-h')

### GLOBAL OPTIONS
This subcommand accepts all the [global options](#global-options)

<br><br><br>
## cargo dist manifest
Generate the final build manifest without running any builds.

This command is designed to match the exact behaviour of 'cargo dist build' when passed the same flags, which is nice for consistency but annoying for anyone who doesn't understand cargo-dist's design really well.

Notably it will default to only talking about artifacts for the host system, and will produce paths to the build dir that may not exist (since the build wasn't run).

'cargo dist plan' is an alias for this command that picks nicer defaults by forcing a couple flags to have specific values. You probably want that.

### Usage

```text
cargo dist manifest [OPTIONS]
```

### Options
#### `-a, --artifacts <ARTIFACTS>`
Which subset of the Artifacts to build

Artifacts can be broken up into two major classes: "local" ones, which are made for each target system (executable-zips, symbols, MSIs...); and "global" ones, which are made once per app (curl-sh installers, npm package, metadata...).

Having this distinction lets us run cargo-dist independently on multiple machines without collisions between the outputs.

If let unspecified, we will pick a fuzzier "host" mode that builds "as much as possible" for the local system. This mode is appropriate for local testing/debugging/demoing. If no --target flags are passed on the CLI then "host" mode will try to intelligently guess which targets to build for, which may include building targets that aren't defined in your metadata.dist config (since that config may exclude the current machine!).

The specifics of "host" mode are intentionally unspecified to enable us to provider better out-of-the-box UX for local usage. In CI environments you should always specify "global" or "local" to get consistent behaviour!

\[default: host]  

Possible values:
- local:  Build target-specific artifacts like executable-zips and MSIs
- global: Build unique artifacts like curl-sh installers and npm packages
- host:   Fuzzily build "as much as possible" for the host system
- all:    Build all the artifacts; useful for `cargo dist manifest`

#### `-h, --help`
Print help (see a summary with '-h')

### GLOBAL OPTIONS
This subcommand accepts all the [global options](#global-options)

<br><br><br>
## cargo dist plan
Get a plan of what to build (and check project status)

If you want to know what running your cargo-dist CI will produce, this is the command for you! This is the exact command that CI will run to make its build plan and generate dist-manifest.json (although it adds --output-format=json so that it's machine-readable).

This is an alias for the lower-level 'manifest' command with the appropriate flags forced for asking for "everything"

cargo dist manifest --artifacts=all --no-local-paths

### Usage

```text
cargo dist plan [OPTIONS]
```

### Options
#### `-h, --help`
Print help (see a summary with '-h')

### GLOBAL OPTIONS
This subcommand accepts all the [global options](#global-options)

<br><br><br>
## cargo dist help
Print this message or the help of the given subcommand(s)

### Usage

```text
cargo dist help [COMMAND]
```

### Commands
* [build](#cargo-dist-build): Build artifacts
* [init](#cargo-dist-init): Setup or update cargo-dist
* [generate-ci](#cargo-dist-generate-ci): Generate CI scripts for orchestrating cargo-dist
* [manifest](#cargo-dist-manifest): Generate the final build manifest without running any builds
* [plan](#cargo-dist-plan): Get a plan of what to build (and check project status)
* [help](#cargo-dist-help): Print this message or the help of the given subcommand(s)


stderr:

