---
source: cargo-dist/tests/cli-tests.rs
expression: format_outputs(&output)
---
stdout:
Shippable packaging for Rust.

See 'init', 'build' and 'plan' for the 3 most important subcommands.

Usage: cargo dist [OPTIONS]
       cargo dist <COMMAND>

Commands:
  build     Build artifacts
  init      Setup or update cargo-dist
  generate  Generate one or more pieces of configuration
  linkage   Report on the dynamic libraries used by the built artifacts
  manifest  Generate the final build manifest without running any builds
  plan      Get a plan of what to build (and check project status)
  host      Host artifacts
  help      Print this message or the help of the given subcommand(s)

Options:
  -h, --help
          Print help (see a summary with '-h')

  -V, --version
          Print version

GLOBAL OPTIONS:
  -v, --verbose <VERBOSE>
          How verbose logging should be (log level)
          
          [default: warn]
          [possible values: off, error, warn, info, debug, trace]

  -o, --output-format <OUTPUT_FORMAT>
          The format of the output
          
          [default: human]
          [possible values: human, json]

      --no-local-paths
          Strip local paths from output (e.g. in the dist manifest json)
          
          This is useful for generating a clean "full" manifest as follows:
          
          `cargo dist manifest --artifacts=all --output-format=json --no-local-paths`

  -t, --target <TARGET>
          Target triples we want to build
          
          If left unspecified we will use the values in [workspace.metadata.dist], except for `cargo dist init` which will select some "good defaults" for you.

  -i, --installer <INSTALLER>
          Installers we want to build
          
          If left unspecified we will use the values in [workspace.metadata.dist]. `cargo dist init` will persist the values you pass to that location.

          Possible values:
          - shell:      Generates a shell script that fetches/installs the right build
          - powershell: Generates a powershell script that fetches/installs the right build
          - npm:        Generates an npm project that fetches the right build to your node_modules
          - homebrew:   Generates a Homebrew formula
          - msi:        Generates an msi for each windows platform

  -c, --ci <CI>
          CI we want to support
          
          If left unspecified we will use the value in [workspace.metadata.dist]. `cargo dist init` will persist the values you pass to that location.

          Possible values:
          - github: Generate github CI that uploads to github releases

      --tag <TAG>
          The (git) tag to use for the Announcement that each invocation of cargo-dist is performing.
          
          This tag serves two purposes: defining which apps we are Announcing new Releases for (and therefore building binaries and installers for); and picking an id to use for certain URLs. For instance the git tag associated with a Github Release is part of the URL to fetch artifacts from that release, which needs to be known by some installers!
          
          Unified Announcement: VERSION selects all packages with the given version (v1.0.0, 0.1.0-prerelease.1, releases/1.2.3, ...)
          
          Singular Announcement: PACKAGE-VERSION or PACKAGE/VERSION selects only the given package (my-app-v1.0.0, my-app/1.0.0, release/my-app/v1.2.3-alpha, ...)
          
          If you use the singular version then we will only Announce/Release that package's apps (and return an error if that is not in fact the package's current version). This is appropriate for workspaces that have more than one app.
          
          If you use the unified version then we will assume you're Announcing/Releasing all packages in the workspace that have that version. This is appropriate for workspaces that only have one app, or for monorepos that version all their apps in lockstep.
          
          If you do not specify this tag we will attempt to infer it by trying to Announce/Release every app in the workspace, succeeding only if they all have the same version. The tag selected will be "v{VERSION}".
          
          In the future we may try to make this look at the current git tags or something?

      --allow-dirty
          Allow generated files like CI scripts to be out of date

stderr:

