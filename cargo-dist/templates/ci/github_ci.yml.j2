# Copyright 2022-2023, axodotdev
# SPDX-License-Identifier: MIT or Apache-2.0
#
# CI that:
#
# * checks for a Git Tag that looks like a release
# * builds artifacts with cargo-dist (binaries and installers)
# * creates a Github Release™ and with those artifacts
#
# Note that if any artifact tasks fails, the Github Release™ will still be created
# with as many values as possible, but will be marked as a "draft" so that you can
# inspect it and decide what to do.
name: Release

permissions:
  contents: write

# This task will run whenever you push a git tag that looks like a version
# like "v1", "v1.2.0", "v0.1.0-prerelease01", "my-app-v1.0.0", etc.
# The version will be roughly parsed as ({PACKAGE_NAME}-)?v{VERSION}, where
# PACKAGE_NAME must be the name of a Cargo package in your workspace, and VERSION
# must be a Cargo-style SemVer Version.
#
# If PACKAGE_NAME is specified, then we will create a Github Release™ for that
# package (erroring out if it doesn't have the given version or isn't cargo-dist-able).
#
# If PACKAGE_NAME isn't specified, then we will create a Github Release™ for all
# (cargo-dist-able) packages in the workspace with that version (this is mode is
# intended for workspaces with only one dist-able package, or with all dist-able
# packages versioned/released in lockstep).
#
# If you push multiple tags at once, separate instances of this workflow will
# spin up, creating an independent Github Release™ for each one (unfortunately
# github will drop some tags on the ground if you push more than 3 at once).
#
# If there's a prerelease-style suffix to the version then the Github Release™
# will be marked as a prerelease.
on:
  push:
    tags:
      - '*-?v[0-9]+*'

jobs:
  plan:
    # run cargo dist plan to figure out what we're doing
    runs-on: ubuntu-latest
    outputs:
      val: ${{ steps.plan.outputs.manifest }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      {{%- if rust_version %}}
      - name: Install Rust
        run: rustup update {{{ rust_version }}} --no-self-update && rustup default {{{ rust_version }}}"#
      {{%- endif %}}
      - name: Install cargo-dist
        run: {{{ install_dist_sh }}}
      - id: plan
        run: |
          cargo dist plan --tag=${{ github.ref_name }} --output-format=json > dist-manifest.json
          echo "cargo dist plan ran successfully"
          cat dist-manifest.json
          echo "manifest=$(jq -c "." dist-manifest.json)" >> "$GITHUB_OUTPUT"
      - name: "Upload dist-manifest.json"
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: dist-manifest.json

  upload-dist-artifacts:
    # Build and packages all the things
    needs: plan
    # Let the initial task tell us to not run (currently very blunt)
    if: ${{ fromJson(needs.plan.outputs.val).releases != null }}
    strategy:
      fail-fast: false
      # Target platforms/runners are computed by cargo-dist in create-release.
      # Each member of the matrix has the following arguments:
      #
      # - runner: the github runner
      # - dist-args: cli flags to pass to cargo dist
      # - install-dist: expression to run to install cargo-dist on the runner
      #
      # Typically there will be:
      # - 1 "global" task that builds universal installers
      # - N "local" tasks that build each platform's binaries and platform-specific installers
      matrix: ${{ fromJson(needs.plan.outputs.val).ci.github.artifacts-matrix }}
    runs-on: ${{ matrix.runner }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      {{%- if rust_version %}}
      - name: Install Rust
        run: rustup update {{{ rust_version }}} --no-self-update && rustup default {{{ rust_version }}}"#
      {{%- endif %}}
      - uses: swatinem/rust-cache@v2
      - name: Install cargo-dist
        run: ${{ matrix.install-dist }}
      - id: cargo-dist
        # We force bash here just because github makes it really hard to get values up
        # to "real" actions without writing to env-vars, and writing to env-vars has
        # inconsistent syntax between shell and powershell. cargo-dist and jq work fine
        # in powershell.
        shell: bash
        run: |
          # Actually do builds and make zips and whatnot
          cargo dist build --tag=${{ github.ref_name }} --output-format=json ${{ matrix.dist-args }} > dist-manifest.json
          echo "cargo dist ran successfully"

          # Parse out what we just built and upload it to the Github Release™
          echo "paths<<EOF" >> "$GITHUB_OUTPUT"
          jq --raw-output ".artifacts[]?.path | select( . != null )" dist-manifest.json >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
      - name: "Upload artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: ${{ steps.cargo-dist.outputs.paths }}

  publish-release:
    # Create a Github Release with all the results once everything is done,
    # regardless of success. The release is only marked as non-draft if all tasks succeeded.
    needs:
      - plan
      - upload-dist-artifacts
    if: ${{ always() }}
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: "Download artifacts"
        uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: artifacts
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref }}
          name: ${{ fromJson(needs.plan.outputs.val).announcement_title }}
          body: ${{ fromJson(needs.plan.outputs.val).announcement_github_body }}
          draft: ${{ github.action_status != 'success' }}
          prerelease: ${{ fromJson(needs.plan.outputs.val).announcement_is_prerelease }}
          artifacts: "artifacts/*"

