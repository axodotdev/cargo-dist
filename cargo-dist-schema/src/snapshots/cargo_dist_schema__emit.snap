---
source: cargo-dist-schema/src/lib.rs
expression: json_schema
---
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "DistManifest",
  "description": "A report of the releases and artifacts that dist generated",
  "type": "object",
  "properties": {
    "announcement_changelog": {
      "description": "A changelog for the announcement",
      "type": [
        "string",
        "null"
      ]
    },
    "announcement_github_body": {
      "description": "A Github Releases body for the announcement",
      "type": [
        "string",
        "null"
      ]
    },
    "announcement_is_prerelease": {
      "description": "Whether this announcement appears to be a prerelease",
      "type": "boolean",
      "default": false
    },
    "announcement_tag": {
      "description": "The (git) tag associated with this announcement",
      "type": [
        "string",
        "null"
      ]
    },
    "announcement_tag_is_implicit": {
      "description": "True if --tag wasn't explicitly passed to dist. This usually indicates\nsome kind of dry-run state like pr-run-mode=upload. Some third-party tools\nmay use this as a proxy for \"is dry run\"",
      "type": "boolean",
      "default": false
    },
    "announcement_title": {
      "description": "A title for the announcement",
      "type": [
        "string",
        "null"
      ]
    },
    "artifacts": {
      "description": "The artifacts included in this Announcement, referenced by releases.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/$defs/Artifact"
      }
    },
    "assets": {
      "description": "The assets contained within artifacts (binaries)",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/$defs/AssetInfo"
      }
    },
    "ci": {
      "description": "ci backend info",
      "anyOf": [
        {
          "$ref": "#/$defs/CiInfo"
        },
        {
          "type": "null"
        }
      ]
    },
    "dist_version": {
      "description": "The version of dist that generated this",
      "type": [
        "string",
        "null"
      ]
    },
    "force_latest": {
      "description": "Where possible, announce/publish a release as \"latest\" regardless of semver version",
      "type": "boolean",
      "default": false
    },
    "github_attestations": {
      "description": "Whether Artifact Attestations should be found in the GitHub Release\n\n<https://github.blog/2024-05-02-introducing-artifact-attestations-now-in-public-beta/>",
      "type": "boolean"
    },
    "github_attestations_filters": {
      "description": "Patterns to attest when creating Artifact Attestations",
      "$ref": "#/$defs/GithubAttestationsFilters"
    },
    "github_attestations_phase": {
      "description": "When to generate Artifact Attestations\n\nDefaults to \"build-local-artifacts\" for backwards compatibility",
      "$ref": "#/$defs/GithubAttestationsPhase"
    },
    "linkage": {
      "description": "Data about dynamic linkage in the built libraries",
      "type": "array",
      "default": [],
      "items": {
        "$ref": "#/$defs/Linkage"
      }
    },
    "publish_prereleases": {
      "description": "Whether to publish prereleases to package managers",
      "type": "boolean",
      "default": false
    },
    "releases": {
      "description": "App releases we're distributing",
      "type": "array",
      "items": {
        "$ref": "#/$defs/Release"
      }
    },
    "system_info": {
      "description": "Info about the toolchain used to build this announcement\n\nDEPRECATED: never appears anymore",
      "anyOf": [
        {
          "$ref": "#/$defs/SystemInfo"
        },
        {
          "type": "null"
        }
      ]
    },
    "systems": {
      "description": "The systems that artifacts were built on",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/$defs/SystemInfo"
      }
    },
    "upload_files": {
      "description": "Files to upload",
      "type": "array",
      "default": [],
      "items": {
        "type": "string"
      }
    }
  },
  "$defs": {
    "Artifact": {
      "description": "A distributable artifact that's part of a Release\n\ni.e. a zip or installer",
      "type": "object",
      "properties": {
        "assets": {
          "description": "Assets included in the bundle (like executables and READMEs)",
          "type": "array",
          "items": {
            "$ref": "#/$defs/Asset"
          }
        },
        "checksum": {
          "description": "id of an Artifact that contains the checksum for this Artifact",
          "anyOf": [
            {
              "$ref": "#/$defs/ArtifactId"
            },
            {
              "type": "null"
            }
          ]
        },
        "checksums": {
          "description": "checksums for this artifact\n\nkeys are the name of an algorithm like \"sha256\" or \"sha512\"\nvalues are the actual hex string of the checksum",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/ChecksumValue"
          }
        },
        "description": {
          "description": "A brief description of what this artifact is",
          "type": [
            "string",
            "null"
          ]
        },
        "install_hint": {
          "description": "A string describing how to install this",
          "type": [
            "string",
            "null"
          ]
        },
        "name": {
          "description": "The unique name of the artifact (e.g. `myapp-v1.0.0-x86_64-pc-windows-msvc.zip`)\n\nIf this is missing then that indicates the artifact is purely informative and has\nno physical files associated with it. This may be used (in the future) to e.g.\nindicate you can install the application with `cargo install` or `npm install`.",
          "anyOf": [
            {
              "$ref": "#/$defs/ArtifactId"
            },
            {
              "type": "null"
            }
          ]
        },
        "path": {
          "description": "The location of the artifact on the local system",
          "type": [
            "string",
            "null"
          ]
        },
        "target_triples": {
          "description": "The target triple of the bundle",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TripleName"
          }
        }
      },
      "oneOf": [
        {
          "description": "A zip or a tarball",
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "const": "executable-zip"
            }
          },
          "required": [
            "kind"
          ]
        },
        {
          "description": "Standalone Symbols/Debuginfo for a build",
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "const": "symbols"
            }
          },
          "required": [
            "kind"
          ]
        },
        {
          "description": "Installer",
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "const": "installer"
            }
          },
          "required": [
            "kind"
          ]
        },
        {
          "description": "A checksum of another artifact",
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "const": "checksum"
            }
          },
          "required": [
            "kind"
          ]
        },
        {
          "description": "The checksums of many artifacts",
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "const": "unified-checksum"
            }
          },
          "required": [
            "kind"
          ]
        },
        {
          "description": "A tarball containing the source code",
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "const": "source-tarball"
            }
          },
          "required": [
            "kind"
          ]
        },
        {
          "description": "Some form of extra artifact produced by a sidecar build",
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "const": "extra-artifact"
            }
          },
          "required": [
            "kind"
          ]
        },
        {
          "description": "An updater executable",
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "const": "updater"
            }
          },
          "required": [
            "kind"
          ]
        },
        {
          "description": "A file that already exists",
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "const": "sbom"
            }
          },
          "required": [
            "kind"
          ]
        },
        {
          "description": "An OmniBOR Artifact ID",
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "const": "omnibor-artifact-id"
            }
          },
          "required": [
            "kind"
          ]
        },
        {
          "description": "Unknown to this version of cargo-dist-schema\n\nThis is a fallback for forward/backward-compat",
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "const": "unknown"
            }
          },
          "required": [
            "kind"
          ]
        }
      ]
    },
    "ArtifactId": {
      "description": "The unique ID of an Artifact",
      "type": "string"
    },
    "Asset": {
      "description": "An asset contained in an artifact (executable, license, etc.)",
      "type": "object",
      "properties": {
        "id": {
          "description": "A unique opaque id for an Asset",
          "type": [
            "string",
            "null"
          ]
        },
        "name": {
          "description": "The high-level name of the asset",
          "type": [
            "string",
            "null"
          ]
        },
        "path": {
          "description": "The path of the asset relative to the root of the artifact",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "oneOf": [
        {
          "description": "An executable artifact",
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "const": "executable"
            }
          },
          "$ref": "#/$defs/ExecutableAsset",
          "required": [
            "kind"
          ]
        },
        {
          "description": "A C dynamic library",
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "const": "c_dynamic_library"
            }
          },
          "$ref": "#/$defs/DynamicLibraryAsset",
          "required": [
            "kind"
          ]
        },
        {
          "description": "A C static library",
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "const": "c_static_library"
            }
          },
          "$ref": "#/$defs/StaticLibraryAsset",
          "required": [
            "kind"
          ]
        },
        {
          "description": "A README file",
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "const": "readme"
            }
          },
          "required": [
            "kind"
          ]
        },
        {
          "description": "A LICENSE file",
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "const": "license"
            }
          },
          "required": [
            "kind"
          ]
        },
        {
          "description": "A CHANGELOG or RELEASES file",
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "const": "changelog"
            }
          },
          "required": [
            "kind"
          ]
        },
        {
          "description": "Unknown to this version of cargo-dist-schema\n\nThis is a fallback for forward/backward-compat",
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "const": "unknown"
            }
          },
          "required": [
            "kind"
          ]
        }
      ]
    },
    "AssetInfo": {
      "description": "Info about an Asset (binary)",
      "type": "object",
      "properties": {
        "id": {
          "description": "unique id of the Asset",
          "type": "string"
        },
        "linkage": {
          "description": "the linkage of this Asset",
          "anyOf": [
            {
              "$ref": "#/$defs/Linkage"
            },
            {
              "type": "null"
            }
          ]
        },
        "name": {
          "description": "filename of the Asset",
          "type": "string"
        },
        "system": {
          "description": "the system it was built on",
          "type": "string"
        },
        "target_triples": {
          "description": "rust-style target triples the Asset natively supports\n\n* length 0: not a meaningful question, maybe some static file\n* length 1: typical of binaries\n* length 2+: some kind of universal binary",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TripleName"
          }
        }
      },
      "required": [
        "id",
        "name",
        "system",
        "target_triples"
      ]
    },
    "BuildEnvironment": {
      "description": "Information about the build environment on this system",
      "oneOf": [
        {
          "description": "Linux-specific information",
          "type": "object",
          "properties": {
            "linux": {
              "type": "object",
              "properties": {
                "glibc_version": {
                  "description": "The builder's glibc version, relevant to glibc-based\nbuilds.",
                  "anyOf": [
                    {
                      "$ref": "#/$defs/GlibcVersion"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false,
          "required": [
            "linux"
          ]
        },
        {
          "description": "macOS-specific information",
          "type": "object",
          "properties": {
            "macos": {
              "type": "object",
              "properties": {
                "os_version": {
                  "description": "The version of macOS used by the builder",
                  "type": "string"
                }
              },
              "required": [
                "os_version"
              ]
            }
          },
          "additionalProperties": false,
          "required": [
            "macos"
          ]
        },
        {
          "description": "Windows-specific information",
          "type": "string",
          "const": "windows"
        },
        {
          "description": "Unable to determine what the host OS was - error?",
          "type": "string",
          "const": "indeterminate"
        }
      ]
    },
    "ChecksumValue": {
      "description": "A checksum value, usually the lower-cased hex string of the checksum",
      "type": "string"
    },
    "CiInfo": {
      "description": "CI backend info",
      "type": "object",
      "properties": {
        "github": {
          "description": "GitHub CI backend",
          "anyOf": [
            {
              "$ref": "#/$defs/GithubCiInfo"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "ContainerConfig": {
      "description": "GitHub config that's common between different kinds of jobs (global, local)",
      "type": "object",
      "properties": {
        "host": {
          "description": "The host triple of the container, something like `x86_64-unknown-linux-gnu`\nor `aarch64-unknown-linux-musl` or whatever.",
          "$ref": "#/$defs/TripleName"
        },
        "image": {
          "description": "The container image to run, something like `ubuntu:22.04` or\n`quay.io/pypa/manylinux_2_28_x86_64`",
          "$ref": "#/$defs/ContainerImage"
        },
        "package_manager": {
          "description": "The package manager to use within the container, like `apt`.",
          "anyOf": [
            {
              "$ref": "#/$defs/PackageManager"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "required": [
        "image",
        "host"
      ]
    },
    "ContainerImage": {
      "description": "A container image, like `quay.io/pypa/manylinux_2_28_x86_64`",
      "type": "string"
    },
    "DashScript": {
      "description": "A bit of shell script (that can run with `/bin/sh`), ran on CI runners. Can be multi-line.",
      "type": "string"
    },
    "DynamicLibraryAsset": {
      "description": "A C dynamic library artifact (so/dylib/dll)",
      "type": "object",
      "properties": {
        "symbols_artifact": {
          "description": "The name of the Artifact containing symbols for this library",
          "anyOf": [
            {
              "$ref": "#/$defs/ArtifactId"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "EnvironmentVariables": {
      "description": "Release-specific environment variables",
      "type": "object",
      "properties": {
        "disable_update_env_var": {
          "description": "Environment variable to disable updater features",
          "type": "string"
        },
        "download_url_env_var": {
          "description": "Environment variable to override the URL to download from\n\nThis trumps the base_url env vars below.",
          "type": "string"
        },
        "ghe_base_url_env_var": {
          "description": "Environment variable to set the GitHub Enterprise base URL\n\n`{owner}/{repo}` will be added to the end of this value to\nconstruct the installer_download_url.",
          "type": "string"
        },
        "github_base_url_env_var": {
          "description": "Environment variable to set the GitHub base URL\n\n`{owner}/{repo}` will be added to the end of this value to\nconstruct the installer_download_url.",
          "type": "string"
        },
        "github_token_env_var": {
          "description": "Environment variable to set the GitHub BEARER token when fetching archives",
          "type": "string"
        },
        "install_dir_env_var": {
          "description": "Environment variable to force an install location",
          "type": "string"
        },
        "no_modify_path_env_var": {
          "description": "Environment variable to disable modifying the path",
          "type": "string"
        },
        "print_quiet_env_var": {
          "description": "Environment variable to make the installer more quiet",
          "type": "string"
        },
        "print_verbose_env_var": {
          "description": "Environment variable to make the installer more verbose",
          "type": "string"
        },
        "unmanaged_dir_env_var": {
          "description": "Environment variable to force an unmanaged install location",
          "type": "string"
        }
      },
      "required": [
        "install_dir_env_var",
        "unmanaged_dir_env_var",
        "disable_update_env_var",
        "no_modify_path_env_var",
        "print_quiet_env_var",
        "print_verbose_env_var",
        "download_url_env_var",
        "github_base_url_env_var",
        "ghe_base_url_env_var",
        "github_token_env_var"
      ]
    },
    "ExecutableAsset": {
      "description": "An executable artifact (exe/binary)",
      "type": "object",
      "properties": {
        "symbols_artifact": {
          "description": "The name of the Artifact containing symbols for this executable",
          "anyOf": [
            {
              "$ref": "#/$defs/ArtifactId"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "GhaRunStep": {
      "description": "A GitHub Actions \"run\" step, either bash or powershell",
      "oneOf": [
        {
          "description": "see [`DashScript`]",
          "type": "object",
          "properties": {
            "run": {
              "$ref": "#/$defs/DashScript"
            },
            "shell": {
              "type": "string",
              "const": "sh"
            }
          },
          "required": [
            "shell",
            "run"
          ]
        },
        {
          "description": "see [`PowershellScript`]",
          "type": "object",
          "properties": {
            "run": {
              "$ref": "#/$defs/PowershellScript"
            },
            "shell": {
              "type": "string",
              "const": "pwsh"
            }
          },
          "required": [
            "shell",
            "run"
          ]
        }
      ]
    },
    "GithubAttestationsFilters": {
      "description": "Used to capture GitHub Attestations filters",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "GithubAttestationsPhase": {
      "description": "Phase in which to generate GitHub attestations",
      "oneOf": [
        {
          "description": "Generate attestations during the `host` phase",
          "type": "string",
          "const": "host"
        },
        {
          "description": "Generate attestations during `build-local-artifacts` (default for backwards compatibility)",
          "type": "string",
          "const": "build-local-artifacts"
        }
      ]
    },
    "GithubCiInfo": {
      "description": "Github CI backend",
      "type": "object",
      "properties": {
        "artifacts_matrix": {
          "description": "Github CI Matrix for upload-artifacts",
          "anyOf": [
            {
              "$ref": "#/$defs/GithubMatrix"
            },
            {
              "type": "null"
            }
          ]
        },
        "external_repo_commit": {
          "description": "A specific commit to tag in an external repository",
          "type": [
            "string",
            "null"
          ]
        },
        "pr_run_mode": {
          "description": "What kind of job to run on pull request",
          "anyOf": [
            {
              "$ref": "#/$defs/PrRunMode"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "GithubHosting": {
      "description": "Github Hosting",
      "type": "object",
      "properties": {
        "artifact_base_url": {
          "description": "The URL of the host for GitHub, usually `\"https://github.com\"`\n(This can vary for GitHub Enterprise)",
          "type": "string"
        },
        "artifact_download_path": {
          "description": "The path of the release without the base URL\n\ne.g. `/myowner/myrepo/releases/download/v1.0.0/`",
          "type": "string"
        },
        "owner": {
          "description": "The owner of the repo",
          "type": "string"
        },
        "repo": {
          "description": "The name of the repo",
          "type": "string"
        }
      },
      "required": [
        "artifact_base_url",
        "artifact_download_path",
        "owner",
        "repo"
      ]
    },
    "GithubLocalJobConfig": {
      "description": "Used in `github/release.yml.j2` to template out \"local\" build jobs",
      "type": "object",
      "properties": {
        "cache_provider": {
          "description": "What cache provider to use",
          "type": [
            "string",
            "null"
          ]
        },
        "container": {
          "description": "Container image to run the job in, using GitHub's builtin\ncontainer support, see <https://docs.github.com/en/actions/writing-workflows/choosing-where-your-workflow-runs/running-jobs-in-a-container>\n\nThis doesn't allow mounting volumes, or anything, because we're only able\nto set the `container` key to something stringy",
          "anyOf": [
            {
              "$ref": "#/$defs/ContainerConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "dist_args": {
          "description": "Arguments to pass to dist",
          "type": "string"
        },
        "host": {
          "description": "Host triple of the runner (well-known, custom, or best guess).\nIf the runner is one of GitHub's official runner images, the platform\nis hardcoded. If it's custom, then we have a `target_triple => runner` in the config",
          "$ref": "#/$defs/TripleName"
        },
        "install_cargo_auditable": {
          "description": "Expression to execute to install cargo-auditable",
          "anyOf": [
            {
              "$ref": "#/$defs/GhaRunStep"
            },
            {
              "type": "null"
            }
          ]
        },
        "install_dist": {
          "description": "Expression to execute to install dist",
          "$ref": "#/$defs/GhaRunStep"
        },
        "install_omnibor": {
          "description": "Expression to execute to install omnibor-cli",
          "anyOf": [
            {
              "$ref": "#/$defs/GhaRunStep"
            },
            {
              "type": "null"
            }
          ]
        },
        "packages_install": {
          "description": "Command to run to install dependencies",
          "anyOf": [
            {
              "$ref": "#/$defs/PackageInstallScript"
            },
            {
              "type": "null"
            }
          ]
        },
        "runner": {
          "description": "GHA's `runs-on` key: Github Runner image to use, see <https://github.com/actions/runner-images>\nand <https://docs.github.com/en/actions/writing-workflows/choosing-where-your-workflow-runs/choosing-the-runner-for-a-job>\n\nThis is not necessarily a well-known runner, it could be something self-hosted, it\ncould be from BuildJet, Namespace, etc.",
          "$ref": "#/$defs/GithubRunner"
        },
        "targets": {
          "description": "Target triples to build for",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/$defs/TripleName"
          }
        }
      },
      "required": [
        "runner",
        "host",
        "install_dist",
        "dist_args"
      ]
    },
    "GithubMatrix": {
      "description": "Github CI Matrix",
      "type": "object",
      "properties": {
        "include": {
          "description": "define each task manually rather than doing cross-product stuff",
          "type": "array",
          "items": {
            "$ref": "#/$defs/GithubLocalJobConfig"
          }
        }
      }
    },
    "GithubRunner": {
      "description": "The name of a Github Actions Runner, like `ubuntu-22.04` or `macos-13`",
      "type": "string"
    },
    "GlibcVersion": {
      "description": "Minimum glibc version required to run software",
      "type": "object",
      "properties": {
        "major": {
          "description": "Major version",
          "type": "integer",
          "format": "uint64",
          "minimum": 0
        },
        "series": {
          "description": "Series (minor) version",
          "type": "integer",
          "format": "uint64",
          "minimum": 0
        }
      },
      "required": [
        "major",
        "series"
      ]
    },
    "Hosting": {
      "description": "Possible hosting providers",
      "type": "object",
      "properties": {
        "github": {
          "description": "Hosted on Github Releases",
          "anyOf": [
            {
              "$ref": "#/$defs/GithubHosting"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "Library": {
      "description": "Represents a dynamic library located somewhere on the system",
      "type": "object",
      "properties": {
        "package_manager": {
          "description": "Which package manager provided this library",
          "anyOf": [
            {
              "$ref": "#/$defs/PackageManager"
            },
            {
              "type": "null"
            }
          ]
        },
        "path": {
          "description": "The path to the library; on platforms without that information, it will be a basename instead",
          "type": "string"
        },
        "source": {
          "description": "The package from which a library comes, if relevant",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "required": [
        "path"
      ]
    },
    "Linkage": {
      "description": "Information about dynamic libraries used by a binary",
      "type": "object",
      "properties": {
        "frameworks": {
          "description": "Frameworks, only used on macOS",
          "type": "array",
          "items": {
            "$ref": "#/$defs/Library"
          },
          "uniqueItems": true
        },
        "homebrew": {
          "description": "Libraries provided by the Homebrew package manager",
          "type": "array",
          "items": {
            "$ref": "#/$defs/Library"
          },
          "uniqueItems": true
        },
        "other": {
          "description": "Libraries which don't fall into any other categories",
          "type": "array",
          "items": {
            "$ref": "#/$defs/Library"
          },
          "uniqueItems": true
        },
        "public_unmanaged": {
          "description": "Public libraries not provided by the system and not managed by any package manager",
          "type": "array",
          "items": {
            "$ref": "#/$defs/Library"
          },
          "uniqueItems": true
        },
        "system": {
          "description": "Libraries included with the operating system",
          "type": "array",
          "items": {
            "$ref": "#/$defs/Library"
          },
          "uniqueItems": true
        }
      }
    },
    "PackageInstallScript": {
      "description": "A bit of shell script to install brew/apt/chocolatey/etc. packages",
      "type": "string"
    },
    "PackageManager": {
      "description": "Represents the package manager a library was installed by",
      "oneOf": [
        {
          "description": "Homebrew (usually for Mac)",
          "type": "string",
          "const": "homebrew"
        },
        {
          "description": "Apt (Debian, Ubuntu, etc)",
          "type": "string",
          "const": "apt"
        }
      ]
    },
    "PowershellScript": {
      "description": "A bit of powershell script, ran on CI runners. Can be multi-line.",
      "type": "string"
    },
    "PrRunMode": {
      "description": "Type of job to run on pull request",
      "oneOf": [
        {
          "description": "Do not run on pull requests at all",
          "type": "string",
          "const": "skip"
        },
        {
          "description": "Only run the plan step",
          "type": "string",
          "const": "plan"
        },
        {
          "description": "Build and upload artifacts",
          "type": "string",
          "const": "upload"
        }
      ]
    },
    "Release": {
      "description": "A Release of an Application",
      "type": "object",
      "properties": {
        "app_name": {
          "description": "The name of the app",
          "type": "string"
        },
        "app_version": {
          "description": "The version of the app",
          "type": "string"
        },
        "artifacts": {
          "description": "The artifacts for this release (zips, debuginfo, metadata...)",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ArtifactId"
          }
        },
        "display": {
          "description": "Whether to advertise this app's installers/artifacts in announcements",
          "type": [
            "boolean",
            "null"
          ]
        },
        "display_name": {
          "description": "Alternative display name that can be prettier",
          "type": [
            "string",
            "null"
          ]
        },
        "env": {
          "description": "Environment variables which control this release's installer's behaviour",
          "anyOf": [
            {
              "$ref": "#/$defs/EnvironmentVariables"
            },
            {
              "type": "null"
            }
          ]
        },
        "hosting": {
          "description": "Hosting info",
          "$ref": "#/$defs/Hosting"
        }
      },
      "required": [
        "app_name",
        "app_version"
      ]
    },
    "StaticLibraryAsset": {
      "description": "A C static library artifact (a/lib)",
      "type": "object",
      "properties": {
        "symbols_artifact": {
          "description": "The name of the Artifact containing symbols for this library",
          "anyOf": [
            {
              "$ref": "#/$defs/ArtifactId"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "SystemInfo": {
      "description": "Info about a system used to build this announcement.",
      "type": "object",
      "properties": {
        "build_environment": {
          "description": "Environment of the System",
          "$ref": "#/$defs/BuildEnvironment"
        },
        "cargo_version_line": {
          "description": "The version of Cargo used (first line of cargo -vV)",
          "type": [
            "string",
            "null"
          ]
        },
        "id": {
          "description": "The unique id of the System",
          "type": "string"
        }
      },
      "required": [
        "id",
        "build_environment"
      ]
    },
    "TripleName": {
      "description": "A rustc-like target triple/tuple (e.g. \"x86_64-pc-windows-msvc\")",
      "type": "string"
    }
  }
}
